68K GAS   			page 1


   1               	#include "../nkc/macros.h"
   0               	
   0               	
   1               	#ifndef __MACROS_H
   2               	#define __MACROS_H
   3               	
   4               	
   5               	/* DEBUG MACROS */
   6               	#ifdef CONFIG_DEBUG_GIDE_S
   7               	
   8               	.macro dbg msg
   9               	        writeln \msg
  10               	.endm   
  11               	
  12               	.macro dbgwait
  13               	        waitcr
  14               	.endm
  15               	
  16               	
  17               	#else
  18               	.macro dbg msg
  19               	.endm
  20               	
  21               	.macro dbgwait
  22               	.endm
  23               	#endif     
  24               	
  25               	/*
  26               	   Ermittelt die PC-realtive effekive Addresse von var und legt sie in a0 ab.
  27               	   Wird für 68000 gebraucht, da dieser nur 64KB Addressierung kennt:
  28               		lea var(pc),a0 ; funktioniert i.A. nur ab 68020
  29               		LEA32A0 var    ; erledigt das für den 68000
  30               	
  31               		Die Subroutine _LEA32A0 liegt in start00.S
  32               	*/
  33               	
  34               	#ifdef M68000
  35               	.macro LEA32A0 var
  36               		move.l #\var,-(%sp)
  37               		move.l #1f,-(%sp)
  38               		jsr _LEA32A0
  39               	1:	addq.l #8,%sp
  40               	.endm
  41               	
  42               	.macro LEA32 var,reg
  43               		move.l #\var,-(%sp)
  44               		move.l #1f,-(%sp)
  45               		jsr _LEA32A0
  46               	1:	addq.l #8,%sp
  47               		movea.l %a0,\reg
  48               	.endm
  49               	
  50               	/* pea kann auch nur mit 16Bit Displacements ! i.e. "pea d16(pc)" */
  51               	.macro _LEA var,reg
  52               		pea #\var
  53               		move.l (%sp)+,\reg
  54               	.endm
68K GAS   			page 2


  55               	#endif
  56               	
  57               	
  58               	/* Gibt Text an momentaner Cursor Position aus */
  59               	.macro writeln  text             
  60               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
  61               	#ifdef M68000
  62               		LEA32A0 \text
  63               	#else
  64               	        lea \text,%a0
  65               	#endif
  66               	1:
  67               	        move.b (%a0)+,%d0
  68               	        beq 2f
  69               	        moveq #_CO2,%d7
  70               	        trap #1
  71               	        bra 1b
  72               	2:
  73               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
  74               	.endm
  75               	
  76               	.macro prntdot             
  77               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
  78               	        move.b #'.',%d0
  79               	        moveq #_CO2,%d7
  80               	        trap #1
  81               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
  82               	.endm
  83               	
  84               	
  85               	.macro crlf                      
  86               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
  87               	        moveq #_CRLF,%d7
  88               	        trap #1
  89               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
  90               	.endm
  91               	
  92               	
  93               	/* jumps to x,y position */
  94               	
  95               	.macro gotoxy x y           
  96               	 	movem.l %a0-%a6/%d0-%d7,-(%a7)
  97               	 	move.b #\x,%d1           /* d1=X (0..79)*/
  98               	 	move.b #\y,%d2           /* d2=Y (0..23)*/
  99               	 	moveq #_SETCURXY,%d7
 100               	 	trap #1
 101               	 	movem.l (%a7)+,%a0-%a6/%d0-%d7
 102               	.endm
 103               	
 104               	
 105               	.macro getxy x y           
 106               	 	movem.l %a0-%a6/%d0-%d7,-(%a7)
 107               	 	moveq #_GETCURXY,%d7
 108               	 	trap #1
 109               	 	move.b %d1,#\x           /* d1=X (0..79)*/
 110               	 	move.b %d2,#\y           /* d2=Y (0..23)*/
 111               	 	movem.l (%a7)+,%a0-%a6/%d0-%d7
68K GAS   			page 3


 112               	.endm
 113               	
 114               	.macro writexy size x y text            /* gibt einen text an x/y position aus*/
 115               	                            	   	/* TextGrüsse,X,Y,TextAddr (Nullterminiert)*/
 116               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
 117               	        move.b #\size,%d0
 118               	        move.w #\x,%d1
 119               	        move.w #\y,%d2
 120               	        lea \text,%a0
 121               	        moveq #_WRITE,%d7
 122               	        trap #1
 123               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
 124               	.endm
 125               	
 126               	
 127               	
 128               	.macro clrscr                    /* loescht den Bildschirm */
 129               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
 130               	        moveq #_CLRSCREEN,%d7
 131               	        trap #1
 132               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
 133               	.endm
 134               	
 135               	
 136               	
 137               	
 138               	.macro prthex2  value                 	/* gibt 2stellige HEX Zahl aus*/
 139               	                                	/* IN: WERT*/
 140               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
 141               	        move.l \value,%d0
 142               	        lea buffer(%pc),%a0
 143               	        moveq #_PRINT2X,%d7
 144               	        trap #1
 145               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
 146               	.endm
 147               	
 148               	
 149               	.macro prthex8  value            /* gibt 8stellige Hex Zahl aus */
 150               	                                 /* In: WERT */
 151               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
 152               	        move.l \value,%d0
 153               	#ifdef M68000
 154               		LEA32A0 buffer
 155               	#else
 156               	        lea buffer(%pc),%a0
 157               	#endif
 158               	        moveq #_PRINT8X,%d7
 159               	        trap #1
 160               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
 161               	.endm
 162               	
 163               	.macro waitcr                    /* Wartet auf CR (Enter) */
 164               	        movem.l %a0-%a6/%d0-%d7,-(%a7)
 165               	1:
 166               	        moveq #_CI,%d7
 167               	        trap #1
 168               	        cmp.b #0xd,%d0
68K GAS   			page 4


 169               	        bne.s 1b
 170               	        movem.l (%a7)+,%a0-%a6/%d0-%d7
 171               	.endm
 172               	
 173               	
 174               	.macro CMOS_READ index
 175               		movem.l %a0-%a1,-(%a7)
 176               		clr.l %d0
 177               		move.b \index,RTC_DS12887_INDEX.w
 178               		move.b RTC_DS12887_DATA.w,%d0
 179               		movem.l (%a7)+,%a0-%a1
 180               	.endm
 181               	
 182               	.macro BCD_TO_BIN
 183               		movem.l %d1,-(%a7)
 184               		move.l %d0,%d1
 185               		andi #0x0f,%d0
 186               		lsr #4,%d1
 187               		mulu #10,%d1
 188               		add %d1,%d0
 189               		movem.l (%a7)+,%d1
 190               	.endm
 191               	
 192               	.macro BIN_TO_BCD		/*ist zwar 2 Befehle länger, aber schneller und für alle 68xxx*/
 193               		movem.l %d1,-(%a7)
 194               		and.l #0xff,%d0		/*nur Byte gültig*/
 195               		divu #10,%d0
 196               		move %d0,%d1
 197               		lsl #4, %d1
 198               		swap %d0
 199               		add %d0, %d1
 200               		exg %d0, %d1
 201               		movem.l (%a7)+,%d1
 202               	.endm
 203               	
   2               	
   3               		.text
   4               		.global exit
   5               	exit:
   6 0000 202F 0004 		move.l	(4,%A7),%d0
   7               		/*move.l	(__rexit,%pc),(%a7)*/
   8 0004 41FB 0170 		lea __rexit(%pc),%a0
   8      0000 0000 
   9 000c 2E88      		move.l %a0,(%a7)
  10 000e 4E75      		rts
  11               		
  12 0010 0000 0000 	buffer:	ds.b 255	
  12      0000 0000 
  12      0000 0000 
  12      0000 0000 
  12      0000 0000 
68K GAS   			page 5


DEFINED SYMBOLS
              exit.S:5      .text:00000000 exit
              exit.S:12     .text:00000010 buffer

UNDEFINED SYMBOLS
__rexit
