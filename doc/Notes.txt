device numbering:

[DeviceID][DeviceNo][Partition]:


Device 		DeviceID

SD/MMC		sd
IDE/GIDE	hd


DeviceNo: a,b,c,d....

Partition: 0,1,2,3.....




example:

GIDE device 1,   Partition 0:  hda0
GIDE device 1,   Partition 2:  hdb2
SD/MMC device 1, Partition 1:  sda1


Special handling for jados drive letters:
- If drive is specified as one character and a ':', this is a jados drive and will be handled by jados calls (trap 6).
- If jados support is turned off in Makefile.rules, single drive letters cannot be used.




structure:

drivers/
  drv_init.c
    block/
      (g)ide.c
      sd_mmc.c
    char/
       keyboard.c
       serial.c


drv_init.c
  -> 
  -> init_block_devices()
      register_block_device()
      unregister_block_device()
      
  -> get_block_device() (public function for access to block devices)
    

    
initialization:

1) _ll_drv_init() -> init block/character device drivers (call this in startxx.S before fileinit...)
2) _ll_init_fs() (called in io/fclose.c, fileinit() which is called by startxx.S)
  :
  :


fatfs_init_fs

    -> register_driver("HDA","FAT",&fat_file_operations); 	// general driver for gide disk a
    
    
    -> access to device driver via get_block_device() ...
    
    
    
Error-Codes and Return-Values:
------------------------------
Success-Code = 0
System Error Codes 1...99
Filesystem Errors 100...199
DiskIO Errors 200...299

Succeed-Code is ZERO/NULL/0

The following error codes are returned and handles in the following manner:

1) DISK-I/O: -> fs/fatfs/diskio.c and drivers

Sucess-Code = 0
Every other code has an offset of 100

Codes are defined in types.h -> DRESULT (enum)
or
DSATUS = Bitfield defined in types.h


2) Filesystem-I/O: -> fs/

Success-Code = 0
Every other Code has an offset of 200
Codes are defined in types.h -> FRESLT (enum)


3) System-Error-Codes: -> include/errno.HACK

Success-Code = 0

Codes are defined in inclulde/error.h

