
############## define directories ################################################
LIBCSRC=$(BASEDIR)/lib/
INCLUDE=$(BASEDIR)/include
CLIBPATH=$(BASEDIR)/lib
CLIB=CC

############## define the target cpu (68000, 68008, 68020) #######################
CPU=68020

############## tell if we have an 68881 ############################
# if we have an FPU, the internal mathlib will be used !
# 0 = no 68881, 1 = has 68881 
CONFIG_FPU=1

############## tell if IEEE soft-float-lib should be used ############################
# 0 = no Sun ieee math, 1 = use Sun ieee math 
CONFIG_IEEE_MATH=0

############## use filesystems ? ####################################################
CONFIG_FS = 1
CONFIG_FS_NKC = 1
CONFIG_FS_FAT = 1


############# DEBUG configuration #################################################
CONFIG_DEBUG = 0
CONFIG_DEBUG_DISKIO = 0
CONFIG_DEBUG_GIDE_C = 0
CONFIG_DEBUG_GIDE_S = 0
CONFIG_DEBUG_XXPRINTF = 0
# clib io debug
CONFIG_DEBUG_CLIB_IO=0
# HighLevel FileSystem
CONFIG_DEBUG_FS = 1
# NKC/JADOS FileSystem
CONFIG_DEBUG_FS_NKC = 0
# FAT file system module
CONFIG_DEBUG_FS_FAT = 1
CONFIG_DEBUG_FF = 1

############## tell if internal math lib should be used (/math) ############################
# 0 = no internal, use libgcc routines, 1 = use internal math, needs FPU !
# this switch ist not used 
CONFIG_USE_CLIBS_MATH=0

######## c-compiler ################
CC=m68k-uclinux-gcc
############## c-compiler flags ############################################
CFLAGS=

# ############# to use recursive functions disable the following flag #############
GCFLAGS+=NONRECURSIVE

# ######### optimization level (-O0 = do not Optimize, default) #####################
CCFLAGS +=  -O0 

# ######### do not generate debug info at all #####################
CCFLAGS +=  -g0

# ######### do not use builtin funktions like memcpy etc. #####################
CCFLAGS +=  -fno-builtin

# ######### do not generate COMMON variables, instead put them in the .bss #####################
CCFLAGS +=  -fno-common

# ######### define CPU for conditional compilation (preprocessor) #####################
CCFLAGS +=  -DM$(CPU)

#CCFLAGS +=  -mshort

# ######### seperate text and data (includes -fPIC/-fpic) #####################
# not supported with elf2bin (Feb. 2014) - need to relocate <R_68K_GOT32O> entries
#CCFLAGS += -msep-data

# ######### use file systems ... #####################
ifeq ($(CONFIG_FS),1)
CCFLAGS += -DCONFIG_FS
endif
ifeq ($(CONFIG_FS_NKC),1)
CCFLAGS += -DCONFIG_FS_NKC
endif
ifeq ($(CONFIG_FS_FAT),1)
CCFLAGS += -DCONFIG_FS_FAT
endif

# DEBUG options ####################
ifeq ($(CONFIG_DEBUG),1)
CCFLAGS += -DCONFIG_DEBUG

ifeq ($(CONFIG_DEBUG_CLIB_IO),1)
CCFLAGS += -DCONFIG_DEBUG_CLIB_IO
endif

ifeq ($(CONFIG_DEBUG_DISKIO),1)
CCFLAGS += -DCONFIG_DEBUG_DISKIO
endif

ifeq ($(CONFIG_DEBUG_GIDE_C),1)
CCFLAGS += -DCONFIG_DEBUG_GIDE_C
endif

ifeq ($(CONFIG_DEBUG_GIDE_S),1)
CCFLAGS += -DCONFIG_DEBUG_GIDE_S
endif

ifeq ($(CONFIG_DEBUG_FF),1)
CCFLAGS += -DCONFIG_DEBUG_FF
endif

ifeq ($(CONFIG_DEBUG_XXPRINTF),1)
CCFLAGS += -DCONFIG_DEBUG_XXPRINTF
endif

ifeq ($(CONFIG_DEBUG_FS),1)
CCFLAGS += -DCONFIG_DEBUG_FS
endif


ifeq ($(CONFIG_DEBUG_FS_NKC),1)
CCFLAGS += -DCONFIG_DEBUG_FS_NKC
endif

ifeq ($(CONFIG_DEBUG_FS_FAT),1)
CCFLAGS += -DCONFIG_DEBUG_FS_FAT
endif

endif

# use dynamic vsprintf buffer instead of fixed 512Bytes buffer ####################
CCFLAGS += -DUSE_DYNAMIC_VSPRINTF_BUFFER

############# linker ###############################
LD = m68k-uclinux-ld
############# linker flags ###########################################
LDFLAGS=

# ######### generate verbose output ###############
LDFLAGS += --verbose

# ######### generate Map File #####################
#LDFLAGS += -M

# ######### link static ###########################
LDFLAGS += -static

# ######## link whole archive #####################
LDFLAGS += --whole-archive

# ######### specify path to lib #######################
LDFLAGS += -L$(CLIBPATH)


# ######### tell use the CLIB #########################
LDFLAGS += -l$(CLIB)


# ######### use IEEE754 fdlibm.a ################################
ifeq ($(CONFIG_IEEE_MATH),1)
# include the complete ieee math library
LDFLAGS += -lfdlibm
endif


# ######### specify linker script #####################
LDFLAGS += -T $(CLIBPATH)/ram.ld


# ######### generate relocatable output (compile without -r to see undefined symbols) #####################
# withouot -r, all addresses are already relocated in the .text segment of the elf file
# The .ld file defines, where the program load address will be.
# => without -r one has to define ram    : ORIGIN = 0x000400 in ram.ld and use m68k-uclinux-objcopy
LDFLAGS += -r

# ######### generate cross reference information #####################
#LDFLAGS += --cref

# ######### no optimization #####################
LDFLAGS += -O0



############### assembler #################################
AS = m68k-uclinux-as
############### assembler flags ###########################
AFLAGS =
# ######### ##############
AFLAGS += -pipe 
# ######### preprocessor variable(s) ##############
AFLAGS += -DM$(CPU) 

ifeq ($(CONFIG_FPU),1)
AFLAGS += -DCONFIG_FPU
endif

ifeq ($(CONFIG_FS_NKC),1)
AFLAGS += -DCONFIG_FS_NKC
endif

ifeq ($(CONFIG_FS_FAT),1)
AFLAGS += -DCONFIG_FS_FAT
endif

# ######### assembler switch: assemble for $(CPU) ##############
AFLAGS += -m$(CPU) 
# ### tell the compiler to use FPU commands or software floating point ###
ifeq ($(CONFIG_FPU),1)
AFLAGS += -m68881
else
AFLAGS += -msoft-float
#AFLAGS += -mno-68881
endif

# ######### debug configuration ###############
ifeq ($(CONFIG_DEBUG),1)

ifeq ($(CONFIG_DEBUG_GIDE_S),1)
AFLAGS += -DCONFIG_DEBUG_GIDE_S
endif

endif


# -Wa,option instrucs the gnu c compiler to pass option to the assembler, so this is an assembler option given to the compiler
AFLAGS += -Wa,-a,-ad,--bitwise-or


######## to prevent searching the standard include path: ########################
export C_INCLUDE_PATH :=$(BASEDIR)/include
export CPLUS_INCLUDE_PATH :=$(BASEDIR)/include



##### ELF to FLT file conversion ###############
EF = m68k-elf-elf2flt -o

# ## object copy ####
OC=m68k-uclinux-objcopy -O binary

# ## object dump ####
OD=m68k-uclinux-objdump 

# ## elf to bin (.68K) file conversion #######
EB = elf2bin



#############################################################################


# CCFLAGS:
# -0s                           Optimize for size (-O0 = do not Optimize, default)
# -g                            gererates debug info (section .stab)
# -g0				do not generate debug info at all
# -fomit-frame-pointer          Dont keep the frame-pointer in register for functions that don't need one.
# -D__KERNEL__  		these are probably macros in the source code (?)        
# -D__ASSEMBLY__
# -fno-builtin			do not use builtin funktions like memcpy etc.
# -fno-common			do not generate COMMON variables, instead put them in the .bss
# -fPIC 			generate position independet code (use only for smaller code)
# -fpic				like -fPIC but uses shorter offsets where possible => smaller files
# -msep-data			seperate text and data (includes -fPIC/-fpic) - 
#                                       => branches are generated pc-raltive
#                                       => data access is done via GOT
# -D__KERNEL__ -D__ASSEMBLY__


#M680x0 Options
#
#          -march=arch  -mcpu=cpu  -mtune=tune
#          -m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040 
#          -m68060  -mcpu32  -m5200  -m5206e  -m528x  -m5307  -m5407 
#          -mcfv4e  -mbitfield  -mno-bitfield  -mc68000  -mc68020 
#          -mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div  -mshort 
#          -mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel 
#          -malign-int  -mstrict-align  -msep-data  -mno-sep-data 
#          -mshared-library-id=n  -mid-shared-library  -mno-id-shared-library 
#          -mxgot -mno-xgot


# linker flags:
# -M 			generate Map File (to standard output)
# -T ram.ld   
# -c			no main function
# -o			define ouotput file name
# -r                    generate relocatable output (compile without -r to see undefined symbols)
# --cref		generate cross reference information
# --warn-once		Only warn once for each undefined symbol, rather than once per module which refers to it.	
# --whole-archive	Das ganze Archiv linken, keine Optimierung - notwendig bei statisch gelinkten Bibliotheken die 
#                       z.B. Funktionszeiger registrieren
# --unresolved-symbols=report-all

# assembler flags
# -a 			generate assembler listing 
# -ad 			omit debugging directives 
# --bitwise-or 		turn '|' to a normal character (bitwise or f.e.) instead of treating it as a comment character ##############


#LD = m68k-elf-ld -M -T ram.ld  -r --cref  -o
#LD = m68k-uclinux-ld -M -T ram.ld  -r --cref  -o
#LD = m68k-uclinux-ld --verbose -L$(CLIBPATH) -M -T $(CLIBPATH)/ram.ld  -r --cref  -o
#LD = m68k-uclinux-ld --verbose -L$(CLIBPATH) -M -r -O0 --cref  -o

# -mhard-float
#      -m68881
#           Generate floating-point instructions.  This is the default for 68020 and above, and for ColdFire devices
#           that have an FPU.  It defines the macro __HAVE_68881__ on M680x0 targets and __mcffpu__ on ColdFire
#           targets.
#
#       -msoft-float
#           Do not generate floating-point instructions; use library calls instead.  This is the default for 68000,
#           68010, and 68832 targets.  It is also the default for ColdFire devices that have no FPU.

